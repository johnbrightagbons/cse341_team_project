{
  "definition": {
    "openapi": "3.1.0",
    "info": {
      "title": "My E-commerce API",
      "version": "1.0.0",
      "description": "This is a simple CRUD API for an e-commerce application. It allows you to manage products, users, payments, and orders. You can create, read, update, and delete records in each of these categories. The API is built using Node.js and Express, and it uses MongoDB as the database. The API is designed to be easy to use and understand, with clear documentation and examples."
    },
    "servers": [{ "url": "https://cse341-team-project-sc1u.onrender.com" }],
    "tags": [
      {
        "name": "Contributors",
        "description": "(4)"
      },
      {
        "name": "Products",
        "description": "Products management API"
      },
      {
        "name": "Users",
        "description": "Users management API"
      },
      {
        "name": "Payments",
        "description": "Payments management API"
      },
      {
        "name": "Orders",
        "description": "Orders management API"
      }
    ],
    "paths": {
      "/": {
        "get": {
          "summary": "Get all contributors",
          "tags": ["Contributors"],
          "security": [{ "OAuth2": [] }],
          "externalDocs": {
            "description": "Authentication Guide",
            "url": "https://cse341-team-project-jmne.onrender.com/login"
          },
          "responses": {
            "200": {
              "description": "List of all contributors",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Contributor"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/users": {
        "post": {
          "summary": "Create a new User",
          "tags": ["Users"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get all Users",
          "tags": ["Users"],
          "responses": {
            "200": {
              "description": "List of all Users",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/users/{id}": {
        "put": {
          "summary": "Update User by ID",
          "tags": ["Users"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "User ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete User by ID",
          "tags": ["Users"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User deleted successfully"
            },
            "404": {
              "description": "User not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get User by ID",
          "tags": ["Users"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "User ID"
            }
          ],
          "responses": {
            "200": {
              "description": "User details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            },
            "404": {
              "description": "User not found"
            }
          }
        }
      },
      "/orders": {
        "post": {
          "summary": "Create a new Order",
          "tags": ["Orders"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get all Orders",
          "tags": ["Orders"],
          "responses": {
            "200": {
              "description": "List of all Orders",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/orders/{id}": {
        "put": {
          "summary": "Update Order by ID",
          "tags": ["Orders"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Order ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order updated successfully",
              "content": {
                "application/json": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete Order by ID",
          "tags": ["Orders"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Order ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Order deleted successfully"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get Order by ID",
          "tags": ["Orders"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Order ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Order details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            },
            "404": {
              "description": "Order not found"
            }
          }
        }
      },
      "/payments": {
        "post": {
          "summary": "Create a new Payment",
          "tags": ["Payments"],
          "security": [{ "OAuth2": [] }],
          "externalDocs": {
            "description": "Authentication Guide",
            "url": "https://cse341-team-project-jmne.onrender.com/login"
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get all Payments",
          "tags": ["Payments"],
          "responses": {
            "200": {
              "description": "List of all Payments",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Payment"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/{id}": {
        "put": {
          "summary": "Update Payment by ID",
          "tags": ["Payments"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Payment ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment updated successfully",
              "content": {
                "application/json": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            },
            "404": {
              "description": "Payment not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete Payment by ID",
          "tags": ["Payments"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Payment ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment deleted successfully"
            },
            "404": {
              "description": "Payment not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get Payment by ID",
          "tags": ["Payments"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Payment ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            },
            "404": {
              "description": "Payment not found"
            }
          }
        }
      },
      "/products": {
        "post": {
          "summary": "Create a new Product",
          "tags": ["Products"],
          "security": [{ "OAuth2": [] }],
          "externalDocs": {
            "description": "Authentication Guide",
            "url": "https://cse341-team-project-jmne.onrender.com/login"
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get all Products",
          "tags": ["Products"],
          "responses": {
            "200": {
              "description": "List of all Products",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/products/{id}": {
        "put": {
          "summary": "Update Product by ID",
          "tags": ["Products"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Product ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product updated successfully",
              "content": {
                "application/json": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete Product by ID",
          "tags": ["Products"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Product ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Product deleted successfully"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get Product by ID",
          "tags": ["Products"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Product ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Product details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "404": {
              "description": "Product not found"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Product": {
          "type": "object",
          "required": ["name", "description", "image", "price"],
          "properties": {
            "name": {
              "type": "string",
              "description": "Contact's first name"
            },
            "description": {
              "type": "string",
              "description": "Contact's last name"
            },
            "image": {
              "type": "string",
              "description": "Contact's email address"
            },
            "price": {
              "type": "string",
              "description": "Contact's favorite color (e.g., red, blue, green)"
            },
            "createdAt": "date",
            "updatedAt": "date"
          },
          "example": {
            "name": "Trio Juice",
            "description": "Three cups of fruit juice",
            "image": "https://github.com/johnbrightagbons/cse341_team_project/blob/main/assets/images/products/trio_juice.webp?raw=true",
            "price": "25.20"
          }
        },
        "User": {
          "type": "object",
          "required": ["fullname", "email", "password", "role"],
          "properties": {
            "fullname": {
              "type": "string",
              "description": "User's fullnames"
            },
            "email": {
              "type": "string",
              "description": "User's email address"
            },
            "password": {
              "type": "string",
              "description": "User's password"
            },
            "role": {
              "type": "enum",
              "description": ["client", "admin"]
            },
            "createdAt": "date",
            "updatedAt": "date"
          },
          "example": {
            "fullname": "Joseph Smith",
            "email": "josephsmith@celestial.being",
            "password": "$2b$10$sTdM4rPQcYh7vUaO0nXzKu",
            "role": "admin"
          }
        },
        "Payment": {
          "type": "object",
          "required": [
            "orderId",
            "userId",
            "amount",
            "paymentMethod",
            "transactionId",
            "status"
          ],

          "properties": {
            "orderId": {
              "type": "objectId",
              "description": "Order ID"
            },
            "userId": {
              "type": "objectId",
              "description": "User ID"
            },
            "amount": {
              "type": "Number",
              "description": "Total bill of the order"
            },
            "paymentMethod": {
              "type": "enum",
              "description": [
                "credit_card",
                "paypal",
                "bank_transfer",
                "mobile_money"
              ]
            },
            "transactionId": {
              "type": "objectId",
              "description": "Transaction Id"
            },
            "status": {
              "type": "enum",
              "description": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled"
              ]
            },
            "createdAt": "date",
            "updatedAt": "date"
          },
          "example": {
            "orderId": "67e3da44faeaaa489d98ceff",
            "userId": "67e3da44faeaaa489d98ceff",
            "amount": 2000,
            "paymentMethod": "paypal",
            "transactionId": "67e3da44faeaaa489d98ceff",
            "status": "completed"
          }
        },
        "Order": {
          "type": "object",
          "required": [
            "userId",
            "productId",
            "description",
            "image",
            "price",
            "status"
          ],
          "properties": {
            "userId": {
              "type": "string",
              "description": "User ID"
            },
            "productId": {
              "type": "string",
              "description": "Product ID"
            },
            "description": {
              "type": "array",
              "description": "Order details"
            },
            "image": {
              "type": "string",
              "description": "Image path"
            },
            "price": {
              "type": "Number",
              "description": "Price in two decimal place e.g. 56.00"
            },
            "status": {
              "type": "enum",
              "description": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled"
              ]
            },
            "createdAt": "date",
            "updatedAt": "date"
          },
          "example": {
            "userId": "67e3da44faeaaa489d98ceff",
            "productId": "67e3da44faeaaa489d98ceff",
            "description": ["Trio Juice"],
            "image": "https://github.com/johnbrightagbons/cse341_team_project/blob/main/assets/images/products/trio_juice.webp?raw=true",
            "price": "25.20",
            "status": "Delivered"
          }
        },
        "Contributor": {
          "type": "object",
          "required": ["fullname"],
          "properties": {
            "fullname": {
              "type": "string",
              "description": "First Middle Last name"
            },
            "role": {
              "type": "string",
              "description": "Carrer Path"
            },
            "email": {
              "type": "string",
              "description": "Contributor's email address"
            },
            "githubUrl": {
              "type": "string",
              "description": "GitHub URL"
            },
            "contributions": {
              "type": "array",
              "description": "List of contributions"
            },
            "commits": {
              "type": "number",
              "description": "Number of commits"
            },
            "createdAt": "date",
            "updatedAt": "date"
          },
          "example": {
            "fullname": "Alex Chen",
            "role": "Full-Stack Developer",
            "email": "alex.chen@example.com",
            "github": "github.com/alex-chen-dev",
            "contributions": [
              "Developed RESTful API endpoints for user authentication (JWT)",
              "Designed and implemented the React frontend dashboard UI",
              "Optimized MongoDB queries for 40% faster data retrieval",
              "Integrated Stripe payment gateway for subscription management",
              "Wrote unit tests (Jest) for 85% test coverage",
              "Configured CI/CD pipelines with GitHub Actions and Docker",
              "Documented API endpoints using Swagger UI/OpenAPI 3.0"
            ],
            "commits": 28
          }
        }
      }
    }
  },
  "apis": ["./routes/web.js"]
}
