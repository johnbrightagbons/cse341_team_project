{
  "swagger": "2.0",
  "info": {
    "title": "My E-commerce APi",
    "description": "My  E-commerce API",
    "version": "1.0.0"
  },
  "host": "cse341-team-project-zg01.onrender.com",
  "basePath": "/",
  "schemes": ["https"],
  "paths": {
    "/product/": {
      "get": {
        "tags": ["products"],
        "summary": "Retrieve ALL products",
        "produces": ["application/json"],
        "responses": {
          "200": { "description": "OK" },
          "500": { "description": "Internal Server Error" }
        }
      },

      "post": {
        "tags": ["products"],
        "summary": "Create a NEW product",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["name", "description", "price"],
              "properties": {
                "name": { "type": "string", "example": "Smart TV" },
                "description": { "type": "string", "example": "Smart TV apple 50' 2025"  },
                "image": { "type": "string", "example": "https://example.com/smarttv.jpg" },
                "price":{"type":"number", "example":"12.99"}
              }            
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully created the product"},
          "400": {"description": "Bad Request"},
          "500": {"description": "Internal Server Error"}
        }
      }
    },
    
    "/product/{id}":{
      "get": {
        "tags": ["products"],
        "summary": "GET product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Product found successfully"},
          "404": {"description": "Product not Found"},
          "500": {"description": "Internal Server Error"}
        }
      },    

      "put":{
        "tags": ["products"],
        "summary": "Update existing product",      
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"          
          },
          {
            "name": "body",
            "in": "body",
           "required": true,
            "schema": {
              "type": "object",
              "required": ["name", "description", "price"],
              "properties": {
                "name": { "type": "string" },
                "description": { "type": "string" },
                "image": { "type": "string"},               
                "price":{"type":"number"}               
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully updated the product"},
          "400": {"description": "Invalid input or missing required fields"},
          "404": { "description": "Product not found" },
          "500": { "description": "Internal Server Error"}
        }
      },      
      
      "delete": { 
        "tags": ["products"],   
        "summary": "Delete a product by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Successfully deleted the product"},
          "404": {"description": "Product not Found"},
          "500": {"description": "Internal Server Error"}
        }
      }
    },  

    "/user/": {
      "get": {
        "tags": ["users"],
        "summary": "Get ALL users",
        "produces":["application/json"],
        "responses": {
          "200": { "description": "Successfully uploaded the users list."},
          "500": { "description": "Internal Server Error"}
        }
      },

      "post":{
        "tags": ["users"],
        "summary": "Create USER",
        "description": "Create a user in the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["username", "email", "password"],
              "properties": {
                "username": { "type": "string", "example": "null"},
                "email": { "type": "string", "example": "xxx@xxx.com" },
                "password": { "type": "string", "exemple": "123456fff"},               
                "role":{"type":"string", "example": "client or admin"}               
              }            
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully created the user"},
          "400": {"description": "Invalid input or missing required fields"},          
          "500": {"description": "Internal Server Error"}
        }
      }
    },

    "/user/{id}": {
      "get": {
        "tags": ["users"],
        "summary":"Get only one user by ID",
        "description": "Get USER by ID ",
        "produces":["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "User found successfully" },
          "404": {"description": "User not Found"},
          "500": {"description": "Internal Server Error"}
        }
      },    
    
      "put":{
        "tags": ["users"],
        "summary": "Update USER by ID",      
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the user to update"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["username", "email", "password"],
              "properties": {
                "username": { "type": "string" },
                "email": { "type": "string" },
                "password": { "type": "string"},               
                "role":{"type":"string", "example": "client, admin"}               
              }
            }
          }
        ],
        "responses": {
          "200": { "description": "Successfully updated the user" },
          "400": {"description": "Invalid input or missing required fields"},
          "404": { "description": "User not found"},
          "500": {"description": "Internal Server Error" }
        }
      },
      

      "delete": { 
        "tags": ["users"],    
        "summary": "Delete a User by ID ",
        "description": "remove a user from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Successfully deleted the user" },
          "404": { "description": "User not Found" },
          "500": { "description": "Internal Server Error"}
        }
      }
    },    

    "/order/": {
      "get": {
        "tags":["orders"],
        "summary":"Retrieve ALL orders",
        "description": "GET ALL ORDERS from database",
        "produces":["application/json"],        
        "responses": {
          "200": {"description": "Successfully uploaded the orders list."},
          "500": {"description": "Internal Server Error"}
        }
      },
      
      "post":{
        "tags":["orders"],
        "summary": "Create ORDER",
        "description":"Create orders in the database",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["userID", "productID"],
              "properties": {
                "userId": { "type": "string" },
                "productId": { "type": "string" },
                "description": { "type": "string", "example": "xxxx xxxx xxx"},               
                "image":{"type":"string", "exemple": "https://example.com/smarttv.jpg"},
                "price":{"type":"number", "example": 123.99},
                "status":{"type": "string", "example": "pending, processing, shipped, delivered,cancelled"}
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully created the order"},
          "400": {"description": "Invalid input or missing required fields"},          
          "500": { "description": "Internal Server Error" }
        }
      }
    },

    "/order/{id}": {
      "get": {
        "tags":["orders"],
        "summary":"Get only one order by ID",
        "description": "Get ORDER by ID ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Order found successfully"},
          "404": {"description": "Order not Found"},
          "500": {"description": "Internal Server Error"}
        }
      },
   
      "put":{
        "tags":["orders"],
        "summary": "Update ORDER by ID", 
        "description"       :" Modify an existing order",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the contact to update"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["userID", "productID"],
              "properties": {
                "userId": { "type": "string" },
                "productId": { "type": "string" },
                "description": { "type": "string", "example": "xxxx xxxx xxx"},               
                "image":{"type":"string", "example":"https://example.com/smarttv.jpg"},
                "price":{"type":"number", "example": 132.99},
                "status":{"type": "string", "example": "pending, processing, shipped, delivered,cancelled"}
              }
           
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully updated the order"},
          "400": { "description": "Invalid input or missing required fields" },
          "404": { "description": "Order not found" },
          "500": {"description": "Internal Server Error" }
        }
      },      
    
      "delete": {  
        "tags":["orders"],   
        "summary": "Delete an existing order use ID",
        "description":"Delete an existing order from the database",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Successfully deleted the order"},
          "404": {"description": "Order not Found"},
          "500": { "description": "Internal Server Error"}
        }
      }
    },    

    "/payment": {
      "get": {
        "tags":["payments"],
        "summary": "Retrieve ALL payments",
        "description": "GET ALL PAYMENTS -- API Key if needed: Ezl0961tEpx2UxTZ5v2uKFK91qdNAr5npRlMT1zLcE3Mg68XwZj3N8Dyp1R8IvFenrVwHRllOUxF0Og00l0m9NcaYMtH6Bpgdv7N",
        "produces":["application/json"],       
        "responses": {
          "200": {"description": "Susscessfully uploaded all payment list."},
          "500": { "description": "Internal Server Error"}
        }
      },

      "post":{
        "tags":["payments"],
        "summary": "Create PAYMENT", 
        "description":"Create a payment on the database using some necessary parameters",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["orderID", "userID", "amout", "paymentMethod","transactionID"],
              "properties": {
                "orderId": { "type": "string" },
                "userId": { "type": "string" },
                "amount": { "type": "number", "example": 999.99},               
                "paymentMethod":{"type":"string", "example": "credit_card, paypal, bank_transfer, mobile_money"},
                "transactionId":{"type":"string", "example": "1234MNS"},
                "status":{"type": "string", "example": "pending, completed, failed, refunded"}
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully created the payment"},
          "400": {"description": "Invalid input or missing required fields"},        
          "500": {"description": "Internal Server Error"}
        }
      }
    },

    "/payment/{id}": {
      "get": {
        "tags":["payments"],
        "summary":"Get only one payment use ID",
        "description": "Get PAYMENT by ID ",
        "produces":["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {"description": "Payment found successfully"},
          "404": {"description": "Payment not Found"},
          "500": {"description": "Internal Server Error"}
        }
      },    

      "put":{
        "tags":["payments"],
        "summary": "Update PAYMENT by ID",
        "description":"Update an existing payment, using ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"          
          },
          {
            "name": "body",
           "in": "body",
            "required": true,
            "schema": {
             "type": "object",
             "required": ["orderID", "userID", "amout", "paymentMethod","transactionID"],
              "properties": {
                "orderId": { "type": "string" },
                "userId": { "type": "string" },
                "amount": { "type": "number", "example": 999.99},               
                "paymentMethod":{"type":"string", "example": "credit_card, paypal, bank_transfer, mobile_money"},
                "transactionId":{"type":"string", "example": "1234MNS"},
                "status":{"type": "string", "example": "pending, completed, failed, refunded"}
              }
            }
          }
        ],
        "responses": {
          "200": {"description": "Successfully updated the payment"},
          "400": { "description": "Invalid input or missing required fields" },
          "404": { "description": "Payment not found" },
          "500": {"description": "Internal Server Error"}
        }
      },

      "delete": { 
        "tags":["payments"],    
        "summary": "Delete a payment use ID ",
        "description":"Delete a payment using ID and specific parameters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "Successfully deleted the payment"  },
          "404": {  "description": "Payment not Found"  },
          "500": {"description": "Internal Server Error" }
        }
      }
    }
  }
}
   